(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{615:function(n,a,t){"use strict";t.r(a);var e=t(54),s=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"swift-쉽게-더-쉽게"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swift-쉽게-더-쉽게"}},[n._v("#")]),n._v(" Swift 쉽게 더 쉽게")]),n._v(" "),t("h2",{attrs:{id:"single-view-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#single-view-application"}},[n._v("#")]),n._v(" Single view application")]),n._v(" "),t("ul",[t("li",[n._v("AppDelegate.swift\n"),t("ul",[t("li",[n._v("애플리케이션의 동작을 모니터링하는 애플리케이션 델리게이트 역할.")]),n._v(" "),t("li",[t("code",[n._v("function applicationDidEnterBackground(...)")]),n._v(" <<사용자가 우리 앱에 더이상 관심을 두지 않을 때 할 일을 처리\n"),t("ul",[t("li",[n._v("e.g 우리 앱 사용하다 전화받으면 우리 앱 백그라운드상태 될때 이 함수 실행")])])])])]),n._v(" "),t("li",[n._v("ViewController.swift\n"),t("ul",[t("li",[n._v("뷰 컨트롤러 역할.")]),n._v(" "),t("li",[n._v("사용자가 보는 특정 화면이나 뷰를 제어.")])])])]),n._v(" "),t("h2",{attrs:{id:"변수와-상수"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#변수와-상수"}},[n._v("#")]),n._v(" 변수와 상수")]),n._v(" "),t("ul",[t("li",[n._v("변수: "),t("code",[n._v("var numOfStudents = 10")]),n._v(" "),t("ul",[t("li",[n._v("swift가 자동으로 변수 타입을 추론할 때 그 변수는 "),t("code",[n._v("암시적 타입(implicitly typed)")]),n._v("을 갖는다. 값 보고 그걸 기준으로 타입 지정함.")]),n._v(" "),t("li",[t("code",[n._v("명시적 타입")]),n._v(": "),t("code",[n._v("var numOfItems:Int = 77")])])])]),n._v(" "),t("li",[n._v("상수: "),t("code",[n._v("let Pi = 3.1415")])])]),n._v(" "),t("h2",{attrs:{id:"함수"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#함수"}},[n._v("#")]),n._v(" 함수")]),n._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func randomInt(min:Int, max:Int)->Int\n{\n    return min + Int(arc4random_uniform(UInt32(max-min+1)))\n}\n\n//중첩 함수\nfunc nested(i:Int, j:Int)\n{\n    func printAnswer(answer:Int)\n    {\n        println("\\(answer)")\n    }\n    var sum = i+j\n    printAnswer(sum)\n}\n')])])]),t("h2",{attrs:{id:"열거형"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#열거형"}},[n._v("#")]),n._v(" 열거형")]),n._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("enum Day\n{\n    case Mon\n    case Tue\n    ...\n    vase Sun\n}\nvar firstDay = Day.Mon\nfirstDay = .Tue //firstDay가 Day타입으로 이미 선언되어서 .만 찍고 접근 가능.\n")])])]),t("h2",{attrs:{id:"클래스"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#클래스"}},[n._v("#")]),n._v(" 클래스")]),n._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Dog\n{\n    //속성\n    var Name:String\n    var Breed:String\n    var Age:Int\n\n    //initializer\n    init(name:String, breed:String, age:Int)\n    {\n        Name = name\n        Breed = breed\n        Age = age\n    }\n\n    //메서드\n    func sit() \n    {\n        println("\\(name) is sitting")\n    }\n    func getAge()->Int \n    {\n        return Age\n    }\n    func bark()\n    {\n\n    }\n}\n\nlet aDog = Dog(name:"Merry", breed:"Coolie", age:8)\naDog.sit()\n\n//Dog클래스를 상속받은 Beagle클래스\nclass Beagle:Dog\n{\n    override func bark()\n    {\n        println("KAKA")\n    }\n    func makeMess()\n    {\n        println("MESSSSSS")\n    }\n}\n')])])]),t("ul",[t("li",[n._v("initializer\n"),t("ul",[t("li",[n._v("특별한 형태의 클래스 메서드. init키워드로 정의.")]),n._v(" "),t("li",[n._v("클래스의 인스턴스를 생성할 때마다 매번 실행됨.")]),n._v(" "),t("li",[n._v("클래스의 속성을 초기화하며, 클래스의 인스턴스를 생성할 때 전달될 필요가 있는 인자를 받음.")])])])]),n._v(" "),t("h2",{attrs:{id:"프로토콜"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#프로토콜"}},[n._v("#")]),n._v(" 프로토콜")]),n._v(" "),t("ul",[t("li",[n._v("다른 프로그래밍언어에서 인터페이스라고도 한다.")]),n._v(" "),t("li",[n._v("프로토콜에는 그것을 사용하는 클래스에 반드시 있어야 하는 특정 속성과 메서드를 정의.")])]),n._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('protocol Travel{\n    function move()\n}\n\nclass Person:Travel {\n    //반드시 구현해줘야 함.\n    func move(){\n        println("Person is walking")\n    }\n}\n')])])]),t("h2",{attrs:{id:"익스텐션"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#익스텐션"}},[n._v("#")]),n._v(" 익스텐션")]),n._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("extension Double {\n    var toFahrenheit : Double{return self*9/5+32}\n    var toCelcius : Double{return self-32*5/9}\n}\nlet temp:Double = 0\n")])])]),t("h2",{attrs:{id:"연산자-오버로딩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#연산자-오버로딩"}},[n._v("#")]),n._v(" 연산자 오버로딩")]),n._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//구조체 - 간단한 값의 집합을 캡슐화. 속성과 메서드를 포함할 수 있다는 점에서 클래스와 유사\nstruct Vector {\n    var x=0\n    var y=0\n    var z=0\n\n}\n\nvar v1 = Vector(x:5, y:8, z:5)\n")])])]),t("h2",{attrs:{id:"제네릭"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#제네릭"}},[n._v("#")]),n._v(" 제네릭")]),n._v(" "),t("ul",[t("li",[n._v("코드의 반복/중복 문제 해결")])]),n._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//T:인자의 타입. equatable은 모든 인자들의 타입이 같다는 것을 의미.\nfunc isEqual<T: Equatable>(a:T, b:T)->Bool {\n    return a == b\n}\n\nisEqual(3,3)\nisEqual(3.3, 3.5)\nisEqual(true, false)\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);